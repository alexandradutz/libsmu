os: Visual Studio 2015
clone_depth: 1

environment:
    MSYSTEM: MINGW64
    # Tell msys2 to inherit the current directory when starting the shell
    CHERE_INVOKING: 1

configuration:
  - Release
  - Debug

branches:
  except:
    - gh-pages
    - travis-ci
    - coverity_scan

matrix:
  fast_finish: true

install:
  # libusb patched for windows hotplug support
  - git clone https://github.com/analogdevicesinc/libusb.git "C:\libusb"
  # install innosetup for creating installers
  - choco install InnoSetup
  - set PATH=%PATH%;"C:\Program Files (x86)\Inno Setup 5"

build_script:
  ##### MinGW build
  - set OPT_PATH=C:\msys64\mingw32\bin;C:\msys64\mingw64\bin;
  - set PATH=%OPT_PATH%%PATH%
  - C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Syu"

  # Install MinGW dependencies for 32 bit
  - C:\msys64\usr\bin\bash -lc "pacman -Rs --noconfirm mingw-w64-i686-gcc-ada mingw-w64-i686-gcc-fortran mingw-w64-i686-gcc-libgfortran mingw-w64-i686-gcc-objc"
  - C:\msys64\usr\bin\bash -lc "rm /mingw32/etc/gdbinit"
  - C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Sy mingw-w64-i686-gcc mingw-w64-i686-cmake mingw-w64-i686-pkg-config mingw-w64-i686-python2-pip mingw-w64-i686-cython mingw-w64-i686-cython2 mingw-w64-i686-openblas mingw-w64-i686-lapack mingw-w64-i686-python3 mingw-w64-i686-python3-pip mingw-w64-i686-python3-setuptools mingw-w64-i686-python2-setuptools mingw-w64-i686-binutils"
  # Install MinGW dependencies for 64 bit
  - C:\msys64\usr\bin\bash -lc "pacman -Rs --noconfirm mingw-w64-x86_64-gcc-ada mingw-w64-x86_64-gcc-fortran mingw-w64-x86_64-gcc-libgfortran mingw-w64-x86_64-gcc-objc"
  - C:\msys64\usr\bin\bash -lc "rm /mingw64/etc/gdbinit"
  - C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Sy mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-pkg-config mingw-w64-x86_64-python2-pip mingw-w64-x86_64-cython mingw-w64-x86_64-cython2 mingw-w64-x86_64-openblas mingw-w64-x86_64-lapack mingw-w64-x86_64-python3 mingw-w64-x86_64-python3-pip mingw-w64-x86_64-python3-setuptools mingw-w64-x86_64-python2-setuptools mingw-w64-x86_64-binutils"

  # Get libusb hotplug for 32 bit
  - ps: (new-object System.Net.WebClient).Downloadfile("http://swdownloads.analog.com/cse/build/libusb-1.0-hp.7z", "c:\libusb.7z")
  - 7z x -y "c:\libusb.7z" -o"C:\libusb-mingw" > nul
  # Compile libusb hotplug for 64 bit
  - git clone --branch=hotplug https://github.com/analogdevicesinc/libusb.git "C:\libusb-mingw64"
  - C:\msys64\usr\bin\bash -lc "cd C:/libusb-mingw64 && ./autogen.sh && ./configure --prefix=/mingw64 --build=x86_64-w64-mingw32 --host=x86_64-w64-mingw32 && make -j4"

  # Build libsmu MinGW 32 bit
  - echo "Running cmake for MinGW 32..."
  - mkdir c:\projects\libsmu\mingw-32
  - C:\msys64\usr\bin\bash -lc "cd C:/projects/libsmu/mingw-32 && cmake -G 'Unix Makefiles' -DCMAKE_INSTALL_PREFIX=/mingw32 -DCMAKE_BUILD_TYPE=%CONFIGURATION% -DCMAKE_C_COMPILER:FILEPATH=/mingw32/bin/i686-w64-mingw32-gcc.exe -DCMAKE_CXX_COMPILER:FILEPATH=/mingw32/bin/i686-w64-mingw32-g++.exe -DLIBUSB_LIBRARIES=C:/libusb-mingw/MinGW32/static/libusb-1.0.a -DLIBUSB_INCLUDE_DIRS=C:/libusb-mingw/include/libusb-1.0 -DBoost_USE_STATIC_LIBS=ON -DBUILD_STATIC_LIB=ON -DBUILD_EXAMPLES=ON -DBUILD_TESTS=ON -DBOOST_ROOT=C:/Libraries/boost_1_62_0 -DBUILD_PYTHON=OFF .. && cmake --build . --config %CONFIGURATION%"

  # Build libsmu MinGW 64 bit
  - echo "Running cmake for MinGW 64..."
  - mkdir c:\projects\libsmu\mingw-64
  - C:\msys64\usr\bin\bash -lc "cd C:/projects/libsmu/mingw-64 && cmake -G 'Unix Makefiles' -DCMAKE_INSTALL_PREFIX=/mingw64 -DCMAKE_BUILD_TYPE=%CONFIGURATION% -DCMAKE_C_COMPILER:FILEPATH=/mingw64/bin/x86_64-w64-mingw32-gcc.exe -DCMAKE_CXX_COMPILER:FILEPATH=/mingw64/bin/x86_64-w64-mingw32-g++.exe -DLIBUSB_LIBRARIES=C:/libusb-mingw64/libusb/.libs/libusb-1.0.a -DLIBUSB_INCLUDE_DIRS=C:/libusb-mingw64/libusb -DBoost_USE_STATIC_LIBS=ON -DBUILD_STATIC_LIB=ON -DBUILD_EXAMPLES=ON -DBUILD_TESTS=ON -DBOOST_ROOT=C:/Libraries/boost_1_62_0 -DBUILD_PYTHON=OFF .. && cmake --build . --config %CONFIGURATION%"

  # Create libsmu zip artifact for 32 bit
  - mkdir c:\libsmu-%LIBSMU_VERSION%-MinGW-win32
  - mkdir c:\libsmu-%LIBSMU_VERSION%-MinGW-win32\drivers
  - copy c:\projects\libsmu\include\libsmu\libsmu.hpp c:\libsmu-%LIBSMU_VERSION%-MinGW-win32
  - copy c:\projects\libsmu\dist\m1k-winusb.inf c:\libsmu-%LIBSMU_VERSION%-MinGW-win32\drivers
  - copy c:\projects\libsmu\dist\m1k-winusbx86.cat c:\libsmu-%LIBSMU_VERSION%-MinGW-win32\drivers
  - copy c:\projects\libsmu\mingw-32\src\libsmu.* c:\libsmu-%LIBSMU_VERSION%-MinGW-win32
  - copy c:\projects\libsmu\mingw-32\src\cli\smu.exe c:\libsmu-%LIBSMU_VERSION%-MinGW-win32
  # gtest libraries for test executables
  - if(%CONFIGURATION%==Release){
        copy c:\projects\libsmu\mingw-32\googletest-build\googlemock\gtest\libgtest* c:\libsmu-%LIBSMU_VERSION%-MinGW-win32
    }
    else{
        copy c:\projects\libsmu\mingw-32\googletest-build\googlemock\gtest\libgtestd* c:\libsmu-%LIBSMU_VERSION%-MinGW-win32
    }
  - copy c:\projects\libsmu\mingw-32\examples\*.exe c:\libsmu-%LIBSMU_VERSION%-MinGW-win32
  - copy c:\projects\libsmu\mingw-32\tests\*.exe c:\libsmu-%LIBSMU_VERSION%-MinGW-win32
  - copy c:\libusb-mingw\MinGW32\static\libusb-1.0.a c:\libsmu-%LIBSMU_VERSION%-MinGW-win32
  - C:\msys64\usr\bin\bash -lc "cd c:/msys64/mingw32/bin ; cp -r libwinpthread-*.dll libgcc_*.dll libstdc++-*.dll libgomp-*.dll c:/libsmu-%LIBSMU_VERSION%-MinGW-win32"
  - 7z a "c:\libsmu-%LIBSMU_VERSION%-MinGW-win32.zip" c:\libsmu-%LIBSMU_VERSION%-MinGW-win32
  - appveyor PushArtifact c:\libsmu-%LIBSMU_VERSION%-MinGW-win32.zip

  # Create libsmu zip artifact for 64 bit
  - mkdir c:\libsmu-%LIBSMU_VERSION%-MinGW-win64
  - mkdir c:\libsmu-%LIBSMU_VERSION%-MinGW-win64\drivers
  - copy c:\projects\libsmu\include\libsmu\libsmu.hpp c:\libsmu-%LIBSMU_VERSION%-MinGW-win64
  - copy c:\projects\libsmu\dist\m1k-winusb.inf c:\libsmu-%LIBSMU_VERSION%-MinGW-win64\drivers
  - copy c:\projects\libsmu\dist\m1k-winusbx64.cat c:\libsmu-%LIBSMU_VERSION%-MinGW-win64\drivers
  - copy c:\projects\libsmu\mingw-64\src\libsmu.* c:\libsmu-%LIBSMU_VERSION%-MinGW-win64
  - copy c:\projects\libsmu\mingw-64\src\cli\smu.exe c:\libsmu-%LIBSMU_VERSION%-MinGW-win64
  # gtest libraries for test executables
  - if(%CONFIGURATION%==Release){
        copy c:\projects\libsmu\mingw-64\googletest-build\googlemock\gtest\libgtest* c:\libsmu-%LIBSMU_VERSION%-MinGW-win64
    }
    else{
        copy c:\projects\libsmu\mingw-64\googletest-build\googlemock\gtest\libgtestd* c:\libsmu-%LIBSMU_VERSION%-MinGW-win64
    }
  - copy c:\projects\libsmu\mingw-64\examples\*.exe c:\libsmu-%LIBSMU_VERSION%-MinGW-win64
  - copy c:\projects\libsmu\mingw-64\tests\*.exe c:\libsmu-%LIBSMU_VERSION%-MinGW-win64
  - copy c:\libusb-mingw64\libusb\.libs\libusb-1.0.a c:\libsmu-%LIBSMU_VERSION%-MinGW-win64
  - C:\msys64\usr\bin\bash -lc "cd c:/msys64/mingw64/bin ; cp -r libwinpthread-*.dll libgcc_*.dll libstdc++-*.dll libgomp-*.dll c:/libsmu-%LIBSMU_VERSION%-MinGW-win64"
  - 7z a "c:\libsmu-%LIBSMU_VERSION%-MinGW-win64.zip" c:\libsmu-%LIBSMU_VERSION%-MinGW-win64
  - appveyor PushArtifact c:\libsmu-%LIBSMU_VERSION%-MinGW-win64.zip
  
  
  #============================================================================================================
   #Prepare for python bindings
  #- echo [build] compiler=mingw32 [build_ext] compiler=mingw32 >> c:\msys64\mingw32\lib\python2.7\distutils\distutils.cfg
  #- echo [build] compiler=mingw32 [build_ext] compiler=mingw32 >> c:\msys64\mingw32\lib\python3.6\distutils\distutils.cfg

  # update pip to keep it from complaining
  - "pip3 install --only-binary :all: --disable-pip-version-check --user --upgrade pip"
  # wheel needs to be installed in order to build binary wheels for pysmu
  - "pip3 install --only-binary :all: wheel"
  # cython is required for generating the extensions
  #- "pip3 install cython"
  - "pip3 install pyreadline"
  - C:\msys64\usr\bin\bash -lc "rm -rf build"
  
  # build python dist files
  - cd C:\projects\libsmu\bindings\python
  - "python3 --version"
  - "python3 setup.py build_ext --compiler=mingw32 -L C:\\projects\\libsmu\\mingw-32\\src -I C:\\libusb-mingw\\include\\libusb-1.0"
  - "python3 setup.py build"
  - "python3 setup.py bdist_wheel --skip-build"
  - "python3 setup.py bdist --skip-build --verbose --formats=zip --dest-dir=C:\\projects\\libsmu\\bindings\\python"
  - ls build
  - "python3 setup.py sdist"
  
  #- set PATH=C:\\msys64\\mingw32\\lib\\python2.7;C:\\msys64\\mingw32\\lib\\python2.7\\Tools\\scripts;%PATH%
  - mkdir C:\projects\libsmu-python  
  - set HOME = C:\projects\libsmu\bindings\python
  # update pip to keep it from complaining
  - "pip2 install --only-binary :all: --disable-pip-version-check --user --upgrade pip"
  # wheel needs to be installed in order to build binary wheels for pysmu
  - "pip2 install --only-binary :all: wheel"
  # cython is required for generating the extensions
  #- "pip2 install cython"
  
  # build python dist files
  - cd C:\projects\libsmu\bindings\python
  - C:\msys64\usr\bin\bash -lc "rm -rf build"
  - ls
  - "python2 --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "python2 setup.py build_ext --compiler=mingw32 -L C:\\projects\\libsmu\\mingw-32\\src -I C:\\libusb-mingw\\include\\libusb-1.0"
  - "python2 setup.py build"
  - "python2 setup.py bdist_wheel --skip-build"
  - "python2 setup.py bdist_dumb --skip-build --format=zip"
  - ls
  - ls build/
  # test local install
  - ps: Get-ChildItem dist/*-cp27-*-win32.whl | % { pip install "$_" }
  
  # update pip to keep it from complaining
  - "pip3 install --only-binary :all: --disable-pip-version-check --user --upgrade pip"
  # wheel needs to be installed in order to build binary wheels for pysmu
  - "pip3 install --only-binary :all: wheel"
  # cython is required for generating the extensions
  - "pip3 install cython"
  - "pip3 install pyreadline"
  
  # build python dist files
  - cd C:\projects\libsmu\bindings\python
  - "python3 --version"
  - "python3 setup.py build_ext --compiler=mingw32 -L C:\\projects\\libsmu\\mingw-32\\src -I C:\\libusb-mingw\\include\\libusb-1.0"
  - "python3 setup.py build"
  - "python3 setup.py bdist_wheel --skip-build"
  - "python3 setup.py bdist --skip-build --format zip"
  - "python3 setup.py sdist"
  
    # test local install
  - ps: Get-ChildItem dist/*-cp36-*-win32.whl | % { pip install "$_" }
  
    # push all dist files as artifacts
  - ps: Get-ChildItem dist/.\* | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }

  # push pysmu binaries as artifacts
  - ren exe32\pysmu.exe pysmu32.exe
  - ren exe64\pysmu.exe pysmu64.exe
  - appveyor PushArtifact exe32\pysmu32.exe
  - appveyor PushArtifact exe64\pysmu64.exe
#========================================================================================================

cache:
  # cache innosetup download
  - C:\Users\appveyor\AppData\Local\Temp\chocolatey
  
